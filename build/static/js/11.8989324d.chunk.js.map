{"version":3,"sources":["components/UI/TableComp.js","components/Dashboard/OccupancyChart.js","components/Dashboard/DailyEntryChart.js","components/Dashboard/GuestTypeChart.js","components/Dashboard/DestinationChart.js","routes/Dashboard.js"],"names":["searchUserTitles","SearchUserTitleComp","map","title","sx","fontWeight","align","SearchUserData","dataInfo","data","firstName","lastName","role","accessLevel","email","id","dateOfBirth","toDate","toLocaleString","dateStyle","createdOn","timeStyle","searchGuestTitles","SearchGuestTitleComp","SearchGuestData","index","entrance","dateOfEntry","destination","TableComp","props","type","console","log","mt","minWidth","size","OccupancyChart","totalPeople","length","colorCondition","value","fill","CardMedia","ResponsiveContainer","width","height","RadialBarChart","cx","cy","startAngle","endAngle","outerRadius","innerRadius","barSize","PolarAngleAxis","domain","tick","RadialBar","background","dataKey","x","y","textAnchor","dominantBaseline","CardContent","Typography","variant","component","color","DailyEntryChart","React","useState","setData","useEffect","time","value1","hourGroup","forEach","entry","push","getHours","groupedData","count","total","dataArray","i","counter","ComposedChart","margin","right","left","XAxis","stroke","YAxis","yAxisId","orientation","Tooltip","wrapperStyle","outline","contentStyle","backgroundColor","borderRadius","Bar","name","Line","strokeWidth","Legend","typeOfGuest","COLORS","destinations","DestinationChart","roleGroup","m","PieChart","Pie","label","isAnimationActive","Cell","dashboardItems","Comp","xs","md","lg","Dashboard","guests","setGuests","loading","setLoading","today","Date","start","startOfDay","end","endOfDay","isSubscribed","guestsRef","collection","db","q","query","where","orderBy","limit","onSnapshot","querySnapshot","empty","results","doc","Box","display","CssBaseline","p","pl","flexGrow","overflow","LinearProgress","container","spacing","item","DashboardItem","Card","elevation","flexDirection"],"mappings":"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","file":"static/js/11.8989324d.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\n// import { formatDistanceToNowStrict } from \"date-fns\";\r\n\r\n// Separate the components and organize it in a folder\r\nconst searchUserTitles = [\r\n  \"Name\",\r\n  \"Role\",\r\n  \"Access Level\",\r\n  \"Email\",\r\n  \"ID\",\r\n  \"Date of birth\",\r\n  \"Created on\",\r\n];\r\nconst SearchUserTitleComp = () => {\r\n  return searchUserTitles.map((title) => (\r\n    <TableCell sx={{ fontWeight: \"bold\" }} align=\"center\" key={title}>\r\n      {title}\r\n    </TableCell>\r\n  ));\r\n};\r\n\r\nconst SearchUserData = ({ dataInfo }) => {\r\n  return dataInfo.map((data) => (\r\n    <TableRow key={data.id}>\r\n      <TableCell align=\"center\">\r\n        {data.firstName + \" \" + data.lastName}\r\n      </TableCell>\r\n      <TableCell align=\"center\">{data.role}</TableCell>\r\n      <TableCell align=\"center\">{data.accessLevel}</TableCell>\r\n      <TableCell align=\"center\">{data.email}</TableCell>\r\n      <TableCell align=\"center\">{data.id}</TableCell>\r\n      <TableCell align=\"center\">\r\n        {data.dateOfBirth\r\n          .toDate()\r\n          .toLocaleString(\"en-US\", { dateStyle: \"long\" })}\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        {data.createdOn\r\n          .toDate()\r\n          .toLocaleString(\"en-US\", { dateStyle: \"long\", timeStyle: \"short\" })}\r\n      </TableCell>\r\n    </TableRow>\r\n  ));\r\n};\r\n\r\nconst searchGuestTitles = [\r\n  \"Name\",\r\n  \"ID\",\r\n  \"Role\",\r\n  \"Entrance #\",\r\n  \"Date of entry\",\r\n  \"Destination\",\r\n];\r\n\r\nconst SearchGuestTitleComp = () => {\r\n  return searchGuestTitles.map((title) => (\r\n    <TableCell sx={{ fontWeight: \"bold\" }} align=\"center\" key={title}>\r\n      {title}\r\n    </TableCell>\r\n  ));\r\n};\r\n\r\nconst SearchGuestData = ({ dataInfo }) => {\r\n  return dataInfo.map((data, index) => (\r\n    <TableRow key={index}>\r\n      <TableCell align=\"center\">\r\n        {data.firstName + \" \" + data.lastName}\r\n      </TableCell>\r\n      <TableCell align=\"center\">{data.id}</TableCell>\r\n      <TableCell align=\"center\">{data.role}</TableCell>\r\n      <TableCell align=\"center\">{data.entrance}</TableCell>\r\n      <TableCell align=\"center\">\r\n        {data.dateOfEntry\r\n          .toDate()\r\n          .toLocaleString(\"en-US\", { dateStyle: \"long\", timeStyle: \"short\" })}\r\n        {/* {formatDistanceToNowStrict(data.dateOfEntry.toDate(), { addSuffix: true })} */}\r\n      </TableCell>\r\n      <TableCell align=\"center\">{data.destination}</TableCell>\r\n    </TableRow>\r\n  ));\r\n};\r\n\r\nexport default function TableComp(props) {\r\n  const { type, dataInfo } = props;\r\n  console.log(dataInfo);\r\n  return (\r\n    <TableContainer sx={{ mt: 2 }}>\r\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"Search table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {type === \"SearchUser\" && <SearchUserTitleComp />}\r\n            {type === \"SearchGuest\" && <SearchGuestTitleComp />}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {type === \"SearchUser\" && <SearchUserData dataInfo={dataInfo} />}\r\n          {type === \"SearchGuest\" && <SearchGuestData dataInfo={dataInfo} />}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Typography from '@mui/material/Typography';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\n\r\nimport {\r\n  RadialBarChart,\r\n  RadialBar,\r\n  PolarAngleAxis,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\n\r\n//need to add a Card for better spacing\r\nfunction OccupancyChart(props) {\r\n  // const totalPeople = 60;\r\n  const totalPeople = props.dataInfo.length\r\n\r\n  \r\n  const colorCondition = () => {\r\n    if (totalPeople < 70) {\r\n      return \"#02ba0f\";\r\n    }\r\n    if (totalPeople >= 70 && totalPeople < 90) {\r\n      return \"#ff8f00\";\r\n    }\r\n    return \"#b71c1c\";\r\n  }\r\n  \r\n    const data = [\r\n    {\r\n      value: totalPeople,\r\n      fill: colorCondition(),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    < >\r\n     <CardMedia sx={{mt: 2}}>\r\n     <ResponsiveContainer width=\"100%\" height={props.size}>\r\n        <RadialBarChart\r\n          cx={\"50%\"}\r\n          cy={props.size / 2}\r\n          startAngle={90}\r\n          endAngle={-270}\r\n          outerRadius={props.size / 2}\r\n          innerRadius={props.size / 3}\r\n          barSize={30}\r\n          data={data}\r\n        >\r\n          <PolarAngleAxis type=\"number\" domain={[0, 100]} tick={false} />\r\n          <RadialBar background dataKey=\"value\" />\r\n          <text\r\n              x={\"50%\"}\r\n              y={props.size / 2}\r\n              textAnchor=\"middle\"\r\n              dominantBaseline=\"middle\"\r\n              fill={colorCondition()}\r\n            >\r\n              {totalPeople}\r\n            </text>\r\n        </RadialBarChart>\r\n      </ResponsiveContainer>\r\n     </CardMedia>\r\n     <CardContent>      \r\n     <Typography variant=\"h5\" component=\"h2\">\r\n        Current occupancy\r\n      </Typography>\r\n      <Typography\r\n        variant=\"body2\"\r\n        color=\"textSecondary\"\r\n        component=\"p\"\r\n      >\r\n        Current amount of people in the site\r\n      </Typography>\r\n     </CardContent>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OccupancyChart;\r\n","import React, { useEffect } from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport {\r\n  ComposedChart,\r\n  Bar,\r\n  Line,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n  ResponsiveContainer,\r\n  Legend\r\n} from \"recharts\";\r\nimport getHours from \"date-fns/getHours\";\r\n\r\n\r\n\r\nfunction DailyEntryChart(props) {\r\n  const [data, setData] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.dataInfo.length === 0) {\r\n      setData([{ time: \"No entries today\", value: \"0\", value1: \"0\" }]);\r\n    } else {\r\n      const hourGroup = [];\r\n      props.dataInfo.forEach((entry) => {\r\n        // Get only the hour of the entries\r\n        hourGroup.push(getHours(entry.dateOfEntry.toDate()));\r\n      });\r\n\r\n      // Group by hour\r\n      const groupedData = [];\r\n      hourGroup.forEach((x) => {\r\n        groupedData[x] = (groupedData[x] || 0) + 1;\r\n      });\r\n\r\n      // Set up the array\r\n      const count = [0];\r\n      let total = 0;\r\n      const dataArray = [];\r\n      groupedData.map((data, i) => {\r\n        // in this case, \"i\" indicates the hour\r\n        // Saving the data in an array to add them and get the accumulated amount\r\n        count.push(data);\r\n        let counter = count.length - 1;\r\n        total = total + count[counter];\r\n        dataArray.push({\r\n          time: i < 10 ? `0${i}:00` : `${i}:00`,\r\n          value: data,\r\n          value1: total,\r\n        });\r\n      });\r\n      setData(dataArray);\r\n    }\r\n  }, [props.dataInfo]);\r\n\r\n  return (\r\n    <>\r\n      <CardMedia sx={{mt: 2}}>\r\n        <ResponsiveContainer width=\"100%\" height={props.size}>\r\n          <ComposedChart\r\n            data={data}\r\n            margin={{\r\n              right: 20,\r\n              left: 20,\r\n            }}\r\n          >\r\n            <XAxis dataKey=\"time\" stroke=\"#90a4ae\" />\r\n            <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#0088FE\" />\r\n            <YAxis yAxisId=\"left\" stroke=\"#4caf50\" />\r\n            <Tooltip wrapperStyle={{outline: \"none\"}} contentStyle={{color: \"white\", backgroundColor: \"#424242\", borderRadius: \"10px\"}}/>\r\n            <Bar\r\n              yAxisId=\"left\"\r\n              dataKey=\"value\"\r\n              barSize={20}\r\n              fill=\"#4caf50\"\r\n              name=\"Amount of entries\"              \r\n            />\r\n            <Line\r\n              yAxisId=\"right\"\r\n              type=\"linear\"\r\n              strokeWidth={3}\r\n              dataKey=\"value1\"\r\n              stroke=\"#0088FE\"\r\n              name=\"Accumulated amount\"\r\n            />\r\n            <Legend/>\r\n          </ComposedChart>\r\n        </ResponsiveContainer>\r\n      </CardMedia>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Daily entry\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          Daily entries grouped by hour of entry\r\n        </Typography>\r\n      </CardContent>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DailyEntryChart;\r\n","import React, { useEffect } from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Cell,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nconst typeOfGuest = [\"STUDENT\", \"GUEST\", \"PROFESSOR\", \"CLERK\"];\r\nconst COLORS = [\"#0088FE\", \"#4caf50\", \"#ffc107\", \"#f57c00\"];\r\n\r\nconst GuestTypeChart = (props) => {\r\n  const [data, setData] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.dataInfo.length === 0) {\r\n      return;\r\n    } else {\r\n      const roleGroup = [];\r\n      props.dataInfo.forEach((entry) => {\r\n        // Get only the role of the guests\r\n        roleGroup.push(entry.role);\r\n      });\r\n\r\n      // Group by role\r\n      const groupedData = [];\r\n      roleGroup.forEach((x) => {\r\n        groupedData[x] = (groupedData[x] || 0) + 1;\r\n      });\r\n\r\n      // Set up the array\r\n      const dataArray = [];\r\n      typeOfGuest.map((data, i) => {\r\n        // Saving the data in an array\r\n        dataArray.push({ name: data, value: groupedData[data] });\r\n      });\r\n      setData(dataArray);\r\n    }\r\n  }, [props.dataInfo]);\r\n\r\n  return (\r\n    <>\r\n      <CardMedia sx={{m: 1}}>\r\n        <ResponsiveContainer width=\"100%\" height={props.size}>\r\n          <PieChart>\r\n            <Pie\r\n              label\r\n              dataKey=\"value\"\r\n              isAnimationActive={false}\r\n              data={data}\r\n              outerRadius={60}\r\n              stroke=\"none\"\r\n            >\r\n              {data.map((entry, index) => (\r\n                  <Cell\r\n                    key={`cell-${index}`}\r\n                    fill={COLORS[index % COLORS.length]}\r\n                  />\r\n                ))}\r\n            </Pie>\r\n            <Tooltip />\r\n            <Legend />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </CardMedia>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Entries by type\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          Guest distribution by type \r\n        </Typography>\r\n      </CardContent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GuestTypeChart;\r\n","import React, { useEffect } from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { PieChart, Pie, Tooltip, ResponsiveContainer, Cell, Legend } from 'recharts';\r\n\r\n\r\nconst destinations = [\"AUDITORIUM\", \"THEATER\", \"LIBRARY\", \"COLISEUM\"];\r\nconst COLORS = [\"#0088FE\", \"#4caf50\", \"#ffc107\", \"#f57c00\"];\r\n\r\nconst DestinationChart = (props) => {\r\n  const [data, setData] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.dataInfo.length === 0) {\r\n      return;\r\n    } else {\r\n      const roleGroup = [];\r\n      props.dataInfo.forEach((entry) => {\r\n        // Get only the role of the guests\r\n        roleGroup.push(entry.destination);\r\n      });\r\n\r\n      // Group by role\r\n      const groupedData = [];\r\n      roleGroup.forEach((x) => {\r\n        groupedData[x] = (groupedData[x] || 0) + 1;\r\n      });\r\n\r\n      // Set up the array\r\n      const dataArray = [];\r\n      destinations.map((data, i) => {\r\n        // Saving the data in an array\r\n        dataArray.push({ name: data, value: groupedData[data] });\r\n      });\r\n      setData(dataArray);\r\n    }\r\n  }, [props.dataInfo]);\r\n\r\n  return (\r\n    <>\r\n    <CardMedia sx={{m: 1}}>\r\n      <ResponsiveContainer width=\"100%\" height={props.size}>\r\n        <PieChart>\r\n          <Pie\r\n            label\r\n            dataKey=\"value\"\r\n            isAnimationActive={false}\r\n            data={data}\r\n            outerRadius={60}\r\n            stroke=\"none\"\r\n          >\r\n            {data.map((entry, index) => (\r\n                <Cell\r\n                  key={`cell-${index}`}\r\n                  fill={COLORS[index % COLORS.length]}\r\n                />\r\n              ))}\r\n          </Pie>\r\n          <Tooltip />\r\n          <Legend />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </CardMedia>\r\n    <CardContent>\r\n      <Typography variant=\"h5\" component=\"h2\">\r\n        Entries by destination\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n        Guest distribution by destination \r\n      </Typography>\r\n    </CardContent>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default DestinationChart","import { useEffect, useState } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  query,\r\n  orderBy,\r\n  limit,\r\n  onSnapshot,\r\n  where,\r\n} from \"firebase/firestore\";\r\nimport { startOfDay, endOfDay } from \"date-fns\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport Card from '@mui/material/Card';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\n\r\nimport TableComp from \"../components/UI/TableComp\";\r\nimport OccupancyChart from \"../components/Dashboard/OccupancyChart\";\r\nimport DailyEntryChart from \"../components/Dashboard/DailyEntryChart\";\r\nimport GuestTypeChart from \"../components/Dashboard/GuestTypeChart\";\r\nimport DestinationChart from \"../components/Dashboard/DestinationChart\";\r\n\r\nconst dashboardItems = [\r\n  { Comp: DailyEntryChart, xs: 12, md: 6, lg: 6 },\r\n  { Comp: GuestTypeChart, xs: 6, md: 3, lg: 3 },\r\n  { Comp: OccupancyChart, xs: 6, md: 3, lg: 3 },\r\n  { Comp: TableComp, xs: 12, md: 9, lg: 9 },\r\n  { Comp: DestinationChart, xs: 12, md: 3, lg: 3 },\r\n];\r\n\r\nexport default function Dashboard() {\r\n  const [guests, setGuests] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const today = new Date();\r\n  const start = startOfDay(today);\r\n  const end = endOfDay(today);\r\n  const itemsSize = 220 \r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n\r\n    const guestsRef = collection(db, \"guests\");\r\n    const q = query(\r\n      guestsRef,\r\n      where(\"dateOfEntry\", \">=\", start),\r\n      where(\"dateOfEntry\", \"<=\", end),\r\n      orderBy(\"dateOfEntry\", \"desc\"),\r\n      limit(10)\r\n    );\r\n\r\n    onSnapshot(q, (querySnapshot) => {\r\n      if (querySnapshot.empty) {\r\n        console.log(\"No guests have entered yet.\");\r\n        setLoading(false)\r\n      } else {\r\n        const results = [];\r\n        querySnapshot.forEach((doc) => {\r\n          results.push(doc.data());\r\n        });\r\n        console.log(results);\r\n        if (isSubscribed) {\r\n          setGuests(results);\r\n          setLoading(false);\r\n        }\r\n      }\r\n      \r\n\r\n    });\r\n\r\n    return () => {\r\n      isSubscribed = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <CssBaseline />\r\n      <Box component=\"div\" sx={{ p: 2, pl: 8, flexGrow: 1, overflow: \"auto\" }}>\r\n        {loading && <LinearProgress />}\r\n        {!loading && (\r\n          <Grid  container spacing={2}>\r\n            {dashboardItems.map((item, index) => {\r\n              const DashboardItem = item.Comp;\r\n              return (\r\n                <Grid key={index} xs={item.xs} md={item.md} lg={item.lg}>\r\n                  <Card\r\n                    elevation={5}\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      height: 320,\r\n                    }}\r\n                  >\r\n                    <DashboardItem size={itemsSize} type={\"SearchGuest\"} dataInfo={guests} />\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"],"sourceRoot":""}